{"componentChunkName":"component---src-templates-blog-post-js","path":"/클린코드/1장-깨끗한-코드/","result":{"data":{"site":{"siteMetadata":{"title":"Hannah's Dev Log","author":"Heejin Kim","siteUrl":"https://dev-hannahk.github.io","comment":{"disqusShortName":"","utterances":"dev-hannahk/dev-hannahk.github.io"},"sponsor":{"buyMeACoffeeId":"dev-hannahk"}}},"markdownRemark":{"id":"a1bf1a6d-59f5-599b-a7c7-8854fea4780e","excerpt":"…","html":"<ul>\n<li>우아하고 효율적인 코드</li>\n<li>의존성을 최대한 줄여야 유지보수가 쉬워진다.</li>\n<li>오류는 명백한 전략에 의거해 철저히 처리한다.</li>\n<li>깨끗한 코드는 한 가지를 제대로 한다.</li>\n<li>깨끗한 코드는 단순하고 직접적이다.</li>\n<li>깨끗한 코드는 잘 쓴 문장처럼 읽힌다.</li>\n<li>깨끗한 코드는 결코 설계자의 의도를 숨기지 않는다.</li>\n<li>명쾌한 추상화와 단순한 제어문으로 가득하다.</li>\n<li>깨끗한 코드는 작성자가 아닌 사람도 읽기 쉽고 고치기 쉽다.</li>\n<li>단위 테스트 케이스와 인수 테스트 케이스가 존재한다.</li>\n<li>의존성은 최소이며 각 의존성을 명확히 정의한다.</li>\n<li>깨끗한 코드는 언제나 누군가 주의 깊에 짰다는 느낌을 준다.</li>\n<li>모든 테스트를 통과한다.</li>\n<li>중복이 없다.</li>\n<li>시스템 내 모든 설계 아이디어를 표현한다.</li>\n<li>\n<p>클래스, 메서드, 함수 등을 최대한 줄인다.</p>\n<br />\n<br />\n<br />\n</li>\n</ul>\n<p>한꺼번에 많은 시간과 노력을 투자해 코드를 정리할 필요가 없다. 변수 이름 하나를 개선하고, 조금 긴 함수 하나를 분할하고, 약간의 중복을 제거하고, 복잡한 if문 하나를 정리하면 충분하다.</p>\n<p>이 책에서는 좋은 코드도 소개하고 나쁜 코드도 소개한다. 나쁜 코드를 좋은 코드로 바꾸는 방법도 소개한다. 다양한 경험적 교훈과 체계와 절차와 기법도 열거한다. 예제도 무수히 많이 보여준다. 나머지는 나에게 달렸다. 책을 보며 실천하고 연습하는 것이 좋은 코드로 쓰기 위한 길이다!!</p>","frontmatter":{"title":"1장 깨끗한 코드","date":"March 08, 2022"}}},"pageContext":{"slug":"/클린코드/1장-깨끗한-코드/","previous":{"fields":{"slug":"/알고리즘/알고리즘/"},"frontmatter":{"title":"알고리즘"}},"next":null}},"staticQueryHashes":["1210160335","3128451518"]}
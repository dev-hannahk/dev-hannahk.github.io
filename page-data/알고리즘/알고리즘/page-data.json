{"componentChunkName":"component---src-templates-blog-post-js","path":"/알고리즘/알고리즘/","result":{"data":{"site":{"siteMetadata":{"title":"Hannah's Dev Log","author":"Heejin Kim","siteUrl":"https://dev-hannahk.github.io","comment":{"disqusShortName":"","utterances":"dev-hannahk/dev-hannahk.github.io"},"sponsor":{"buyMeACoffeeId":"dev-hannahk"}}},"markdownRemark":{"id":"a3077bd6-2bff-58c9-abdd-f11db5b95c1d","excerpt":"…","html":"<p>알고리즘: 문제를 해결하는 절차</p>\n<h2 id=\"정렬된-배열\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A0%AC%EB%90%9C-%EB%B0%B0%EC%97%B4\" aria-label=\"정렬된 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정렬된 배열</h2>\n<ul>\n<li>항상 순서대로 있어야 한다.</li>\n<li>정렬된 배열에 삽입할 때는 항상 실제 삽입 전에 검색을 먼저 수행해서 삽입할 올바른 위치를 정해야 한다.</li>\n<li>삽입에 있어 정렬된 배열이 일반 배열보다 덜 효율적이지만, 정렬된 배열의 강력함은 검색 연산에서 드러난다.</li>\n</ul>\n<h2 id=\"정렬된-배열의-검색\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A0%AC%EB%90%9C-%EB%B0%B0%EC%97%B4%EC%9D%98-%EA%B2%80%EC%83%89\" aria-label=\"정렬된 배열의 검색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정렬된 배열의 검색</h2>\n<ul>\n<li>선형 검색은 대부분의 경우 일반 배열보다 정렬된 배열에서 단계 수가 더 적게 걸린다.</li>\n<li>하지만 찾으려는 값이 배열의 마지막 값이거나 마지막 값보다 크면 마찬가지로 모든 셀을 검색해야 끝난다.</li>\n<li>정렬된 배열이 배열보다 크게 두드러진 장점은 다른 검색 알고리즘을 쓸 수 있다는 점이다.</li>\n<li>이러한 알고리즘을 이진 검색(binary search)이라 부르며, 이진 검색은 선형 검색보다 훨씬 빠르다.</li>\n</ul>\n<h2 id=\"이진-검색\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A7%84-%EA%B2%80%EC%83%89\" aria-label=\"이진 검색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이진 검색</h2>\n<ul>\n<li>배열은 값의 순서가 뒤죽박죽이므로 이진 검색을 할 수 없다. 배열과 달리 정렬된 배열은 선형 검색 대신 이진 검색을 수행할 수 있다는 큰 장점이 있다.</li>\n</ul>\n<h2 id=\"이진-검색-vs-선형-검색\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A7%84-%EA%B2%80%EC%83%89-vs-%EC%84%A0%ED%98%95-%EA%B2%80%EC%83%89\" aria-label=\"이진 검색 vs 선형 검색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이진 검색 vs 선형 검색</h2>\n<ul>\n<li>선형 검색에서는 원소 수만큼의 단계가 필요하다. 배열의 원소 수를 두 배로 늘릴 때마다 검색에 필요한 단계 수도 두배로 늘어난다.</li>\n<li>이진 검색에서는 배열의 원소 수를 두 배로 늘릴 때마다 한 단계만 늘어난다.</li>\n<li>정렬된 배열의 삽입은 일반 배열보다는 느리지만, 검색은 훨씬 빠르다.</li>\n</ul>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<ul>\n<li>모든 상황에 완벽하게 들어맞는 단 하나의 자료 구조나 알고리즘은 거의 없다.</li>\n<li>데이터 검색은 거의 없고, 데이터를 추가하기만 한다면 삽입을 더 빠르게 처리하는 배열이 더 나은 선택일 수 있다.</li>\n</ul>","frontmatter":{"title":"알고리즘","date":"August 18, 2021"}}},"pageContext":{"slug":"/알고리즘/알고리즘/","previous":{"fields":{"slug":"/알고리즘/자료-구조/"},"frontmatter":{"title":"자료 구조"}},"next":{"fields":{"slug":"/클린코드/1장-깨끗한-코드/"},"frontmatter":{"title":"1장 깨끗한 코드"}}}},"staticQueryHashes":["1210160335","3128451518"]}